{"version":3,"sources":["../src/list_ctrl.js"],"names":["PanelCtrl","_","panelDefaults","IS_ROW","cards","ListCtrl","$scope","$injector","defaultsDeep","panel","events","on","onInitEditMode","bind","onPanelTeardown","render","addEditorTab","$timeout","cancel","nextTickPromise","push","color","title","items","value","info","card","without","index","item","scope","elem","$panelContainer","find","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,e,kBAAAA,S;;AACFC,O;;;;;;;;;;;;;;;;;;;;;AAGDC,mB,GAAgB;AACpBC,gBAAQ,IADY;AAEpBC,eAAO;AAFa,O;;0BAKTC,Q;;;AACX,0BAAYC,MAAZ,EAAoBC,SAApB,EAA+B;AAAA;;AAAA,0HACvBD,MADuB,EACfC,SADe;;AAE7BN,YAAEO,YAAF,CAAe,MAAKC,KAApB,EAA2BP,aAA3B;;AAEA,gBAAKQ,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKC,cAAL,CAAoBC,IAApB,OAAjC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKG,eAAL,CAAqBD,IAArB,OAAjC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,mBAAf,EAAoC,MAAKI,MAAL,CAAYF,IAAZ,OAApC;;AAN6B;AAQ9B;;;;2CAEgB;AACf,iBAAKG,YAAL,CAAkB,SAAlB,EAA6B,+CAA7B,EAA8E,CAA9E;AACD;;;4CAEiB;AAChB,iBAAKC,QAAL,CAAcC,MAAd,CAAqB,KAAKC,eAA1B;AACD;;;oCAES;AACR,iBAAKV,KAAL,CAAWL,KAAX,CAAiBgB,IAAjB,CAAsB;AACpBC,qBAAO,gBADa;AAEpBC,qBAAO,MAFa;AAGpBC,qBAAO,CACL;AACEC,uBAAO,EADT;AAEEC,sBAAM;AAFR,eADK;AAHa,aAAtB;AAUD;;;qCAEUC,I,EAAM;AACf,iBAAKjB,KAAL,CAAWL,KAAX,GAAmBH,EAAE0B,OAAF,CAAU,KAAKlB,KAAL,CAAWL,KAArB,EAA4BsB,IAA5B,CAAnB;AACD;;;kCAEOE,K,EAAO;AACb,iBAAKnB,KAAL,CAAWL,KAAX,CAAiBwB,KAAjB,EAAwBL,KAAxB,CAA8BH,IAA9B,CAAmC,EAAEI,OAAO,EAAT,EAAaC,MAAM,EAAnB,EAAnC;AACD;;;qCAEUG,K,EAAOC,I,EAAM;AACtB,iBAAKpB,KAAL,CAAWL,KAAX,CAAiBwB,KAAjB,EAAwBL,KAAxB,GAAgCtB,EAAE0B,OAAF,CAAU,KAAKlB,KAAL,CAAWL,KAAX,CAAiBwB,KAAjB,EAAwBL,KAAlC,EAAyCM,IAAzC,CAAhC;AACD;;;+BAEIC,K,EAAOC,I,EAAM;AAChB,iBAAKrB,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB,YAAM;AAC7B,kBAAMqB,kBAAkBD,KAAKE,IAAL,CAAU,iBAAV,CAAxB;AACA;AACD,aAHD;AAID;;;;QAjD2BjC,S;;;;AAoD9BK,eAAS6B,WAAT,GAAuB,aAAvB","file":"list_ctrl.js","sourcesContent":["import { PanelCtrl } from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport './css/list-panel.css!';\n\nconst panelDefaults = {\n  IS_ROW: true,\n  cards: []\n};\n\nexport class ListCtrl extends PanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n    _.defaultsDeep(this.panel, panelDefaults);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('panel-initialized', this.render.bind(this));\n\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/grafana-list-panel/editor.html', 2);\n  }\n\n  onPanelTeardown() {\n    this.$timeout.cancel(this.nextTickPromise);\n  }\n\n  addCard() {\n    this.panel.cards.push({\n      color: 'rgb(20,70,181)',\n      title: 'Card',\n      items: [\n        {\n          value: '',\n          info: ''\n        }\n      ]\n    });\n  }\n\n  removeCard(card) {\n    this.panel.cards = _.without(this.panel.cards, card);\n  }\n\n  addItem(index) {\n    this.panel.cards[index].items.push({ value: '', info: '' });\n  }\n\n  removeItem(index, item) {\n    this.panel.cards[index].items = _.without(this.panel.cards[index].items, item);\n  }\n\n  link(scope, elem) {\n    this.events.on('render', () => {\n      const $panelContainer = elem.find('.list-container');\n      // this.panel.IS_ROW=this.panel.span>3.5?true:false;\n    });\n  }\n}\n\nListCtrl.templateUrl = 'module.html';\n"]}