{"version":3,"sources":["../src/transformers.js"],"names":["transformDataToTable","data","panel","model","TableModel","length","transformer","transformers","transform","message","_","moment","flatten","TimeSeries","angular","description","getColumns","columns","text","type","i","series","y","datapoints","dp","rows","push","target","points","timeKey","toString","time","point","values","value","alias","getFlotPairs","cells","stats","annotations","evt","min","title","tags","names","maxDocs","Math","doc","flattened","propName","map","key","z","isObject","JSON","stringify"],"mappings":"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","file":"transformers.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport flatten from 'app/core/utils/flatten';\nimport TimeSeries from 'app/core/time_series2';\nimport TableModel from 'app/core/table_model';\nimport angular from \"angular\";\n\nvar transformers = {};\n\ntransformers['timeseries_to_rows'] = {\n  description: 'Time series to rows',\n  getColumns: function() {\n    return [];\n  },\n  transform: function(data, panel, model) {\n    model.columns = [\n      {text: 'Time', type: 'date'},\n      {text: 'Metric'},\n      {text: 'Value'},\n    ];\n\n    for (var i = 0; i < data.length; i++) {\n      var series = data[i];\n      for (var y = 0; y < series.datapoints.length; y++) {\n        var dp = series.datapoints[y];\n        model.rows.push([dp[1], series.target, dp[0]]);\n      }\n    }\n  },\n};\n\ntransformers['timeseries_to_columns'] = {\n  description: 'Time series to columns',\n  getColumns: function() {\n    return [];\n  },\n  transform: function(data, panel, model) {\n    model.columns.push({text: 'Time', type: 'date'});\n\n    // group by time\n    var points = {};\n\n    for (let i = 0; i < data.length; i++) {\n      var series = data[i];\n      model.columns.push({text: series.target});\n\n      for (var y = 0; y < series.datapoints.length; y++) {\n        var dp = series.datapoints[y];\n        var timeKey = dp[1].toString();\n\n        if (!points[timeKey]) {\n          points[timeKey] = {time: dp[1]};\n          points[timeKey][i] = dp[0];\n        } else {\n          points[timeKey][i] = dp[0];\n        }\n      }\n    }\n\n    for (var time in points) {\n      var point = points[time];\n      var values = [point.time];\n\n      for (let i = 0; i < data.length; i++) {\n        var value = point[i];\n        values.push(value);\n      }\n\n      model.rows.push(values);\n    }\n  }\n};\n\ntransformers['timeseries_aggregations'] = {\n  description: 'Time series aggregations',\n  getColumns: function() {\n    return [\n      {text: 'Avg', value: 'avg'},\n      {text: 'Min', value: 'min'},\n      {text: 'Max', value: 'max'},\n      {text: 'Total', value: 'total'},\n      {text: 'Current', value: 'current'},\n      {text: 'Count', value: 'count'},\n    ];\n  },\n  transform: function(data, panel, model) {\n    var i, y;\n    model.columns.push({text: 'Metric'});\n\n    for (i = 0; i < panel.columns.length; i++) {\n      model.columns.push({text: panel.columns[i].text});\n    }\n\n    for (i = 0; i < data.length; i++) {\n      var series = new TimeSeries({\n        datapoints: data[i].datapoints,\n        alias: data[i].target,\n      });\n\n      series.getFlotPairs('connected');\n      var cells = [series.alias];\n\n      for (y = 0; y < panel.columns.length; y++) {\n        cells.push(series.stats[panel.columns[y].value]);\n      }\n\n      model.rows.push(cells);\n    }\n  }\n};\n\ntransformers['annotations'] = {\n  description: 'Annotations',\n  getColumns: function() {\n    return [];\n  },\n  transform: function(data, panel, model) {\n    model.columns.push({text: 'Time', type: 'date'});\n    model.columns.push({text: 'Title'});\n    model.columns.push({text: 'Text'});\n    model.columns.push({text: 'Tags'});\n\n    if (!data || !data.annotations || data.annotations.length === 0) {\n      return;\n    }\n\n    for (var i = 0; i < data.annotations.length; i++) {\n      var evt = data.annotations[i];\n      model.rows.push([evt.min, evt.title, evt.text, evt.tags]);\n    }\n  }\n};\n\ntransformers['table'] = {\n  description: 'Table',\n  getColumns: function(data) {\n    if (!data || data.length === 0) {\n      return [];\n    }\n  },\n  transform: function(data, panel, model) {\n    if (!data || data.length === 0) {\n      return;\n    }\n\n    if (data[0].type !== 'table') {\n      throw {message: 'Query result is not in table format, try using another transform.'};\n    }\n\n    model.columns = data[0].columns;\n    model.rows = data[0].rows;\n  }\n};\n\ntransformers['json'] = {\n  description: 'JSON Data',\n  getColumns: function(data) {\n    if (!data || data.length === 0) {\n      return [];\n    }\n\n    var names = {};\n    for (var i = 0; i < data.length; i++) {\n      var series = data[i];\n      if (series.type !== 'docs') {\n        continue;\n      }\n\n      // only look at 100 docs\n      var maxDocs = Math.min(series.datapoints.length, 100);\n      for (var y = 0; y < maxDocs; y++) {\n        var doc = series.datapoints[y];\n        var flattened = flatten(doc, null);\n        for (var propName in flattened) {\n          names[propName] = true;\n        }\n      }\n    }\n\n    return _.map(names, function(value, key) {\n      return {text: key, value: key};\n    });\n  },\n  transform: function(data, panel, model) {\n    var i, y, z;\n    for (i = 0; i < panel.columns.length; i++) {\n      model.columns.push({text: panel.columns[i].text});\n    }\n\n    if (model.columns.length === 0) {\n      model.columns.push({text: 'JSON'});\n    }\n\n    for (i = 0; i < data.length; i++) {\n      var series = data[i];\n\n      for (y = 0; y < series.datapoints.length; y++) {\n        var dp = series.datapoints[y];\n        var values = [];\n\n        if (_.isObject(dp) && panel.columns.length > 0) {\n          var flattened = flatten(dp, null);\n          for (z = 0; z < panel.columns.length; z++) {\n            values.push(flattened[panel.columns[z].value]);\n          }\n        } else {\n          values.push(JSON.stringify(dp));\n        }\n\n        model.rows.push(values);\n      }\n    }\n  }\n};\n\nfunction transformDataToTable(data, panel) {\n  var model = new TableModel();\n\n  if (!data || data.length === 0) {\n    return model;\n  }\n\n  var transformer = transformers[panel.transform];\n  if (!transformer) {\n    throw {message: 'Transformer ' + panel.transform + ' not found'};\n  }\n\n  transformer.transform(data, panel, model);\n  return model;\n}\n\nexport {transformers, transformDataToTable};\n"]}