{"version":3,"sources":["../src/echarts_ctrl.js"],"names":["MetricsPanelCtrl","_","echarts","EchartsCtrl","$scope","$injector","panelDefaults","echartsOption","bgColor","colorArr","title","subTitle","titleX","titleY","toolBoxShow","legendShow","legendOrient","legendTop","legendLeft","legendItemHeight","legendItemWidth","gridTop","gridBottom","gridLeft","gridRight","xAxisShow","xAxisName","xAxisLineShow","xAxisLineColor","xAxisTickShow","xAxisTickAlign","xSplitLineShow","yAxisShow","yAxisName","yAxisLineShow","yAxisLineColor","yAxisTickShow","yAxisTickAlign","ySplitLineShow","line","series","USE","fakeData","url","request","updateInterval","seriesDefaults","name","type","barWidth","stack","symbol","symbolSize","labelShow","animationShow","labelPosition","labelFormatter","smooth","step","data","defaultsDeep","panel","length","events","on","onDataReceived","bind","onDataError","onInitEditMode","render","that","setTimeout","updateData","xmlhttp","window","XMLHttpRequest","ActiveXObject","onreadystatechange","readyState","status","UrlData","JSON","parse","responseText","open","send","$timeout","dataList","eval","translateData","console","log","onRender","IS_DATA_CHANGED","dataArr","isArray","i","push","columns","value","values","err","subTabIndex","addEditorTab","colorIndex","color","obj","index","splice","map","scope","elem","attrs","ctrl","$panelContainer","find","callInterval","timeout","result","func","callBack","interval","context","args","arguments","clearInterval","setInterval","apply","setHeight","height","row","isString","parseInt","replace","style","myChart","init","resize","clear","setOption","backgroundColor","text","subtext","x","y","toolbox","show","feature","dataView","readOnly","saveAsImage","tooltip","trigger","formatter","legend","orient","top","left","itemWidth","itemHeight","getLegend","grid","bottom","right","xAxis","axisLine","lineStyle","axisTick","alignWithLabel","axisLabel","textStyle","splitLine","getLine","yAxis","getSeries","forEach","uniq","concat","seriesArr","defaultSeries","label","normal","position","animation","getDefaultSeriesData","seriesName","ctrlData","newData","cData","angular","copy","renderingCompleted","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,4B,kBAAAA,gB;;AACFC,a;;AACAC,mB;;;;;;;;;;;;;;;;;;;;;mCAgBMC,W;;;AAET,qCAAYC,MAAZ,EAAoBC,SAApB,EAA+B;AAAA;;AAAA,0IACrBD,MADqB,EACbC,SADa;;AAG3B,wBAAMC,gBAAgB;AAClBC,uCAAe;AACXC,qCAAS,SADE;AAEXC,sCAAU,CAAC,mBAAD,EAAsB,SAAtB,EAAiC,oBAAjC,EAAuD,SAAvD,EAAkE,qBAAlE,EAAyF,SAAzF,CAFC;AAGXC,mCAAO,MAHI;AAIXC,sCAAU,EAJC;AAKXC,oCAAQ,IALG;AAMXC,oCAAQ,IANG;AAOXC,yCAAa,IAPF;AAQXC,wCAAY,IARD;AASXC,0CAAc,YATH;AAUXC,uCAAW,IAVA;AAWXC,wCAAY,KAXD;AAYXC,8CAAkB,CAZP;AAaXC,6CAAiB,CAbN;AAcXC,qCAAS,KAdE;AAeXC,wCAAY,KAfD;AAgBXC,sCAAU,IAhBC;AAiBXC,uCAAW,IAjBA;AAkBXC,uCAAW,IAlBA;AAmBXC,uCAAW,EAnBA;AAoBXC,2CAAe,IApBJ;AAqBXC,4CAAgB,uBArBL;AAsBXC,2CAAe,IAtBJ;AAuBXC,4CAAgB,IAvBL;AAwBXC,4CAAgB,KAxBL;AAyBXC,uCAAW,IAzBA;AA0BXC,uCAAW,EA1BA;AA2BXC,2CAAe,IA3BJ;AA4BXC,4CAAgB,uBA5BL;AA6BXC,2CAAe,IA7BJ;AA8BXC,4CAAgB,IA9BL;AA+BXC,4CAAgB,KA/BL;AAgCXC,kCAAM,EAhCK;AAiCXC,oCAAQ;AAjCG,yBADG;AAoClBC,6BAAK,WApCa;AAqClBC,kCAAU,kHArCQ;AAsClBC,6BAAK,EAtCa;AAuClBC,iCAAS,EAvCS;AAwClBC,wCAAgB;AAxCE,qBAAtB;;AA2CA,wBAAMC,iBAAiB,CACnB;AACIC,8BAAM,KADV;AAEIC,8BAAM,KAFV;AAGIC,kCAAU,EAHd;AAIIC,+BAAO,EAJX;AAKIC,gCAAQ,EALZ;AAMIC,oCAAY,EANhB;AAOIC,mCAAW,KAPf;AAQIC,uCAAe,IARnB;AASIC,uCAAe,QATnB;AAUIC,wCAAgB,KAVpB;AAWIC,gCAAO,EAXX;AAYIC,8BAAK,EAZT;AAaIC,8BAAM;AAbV,qBADmB,CAAvB;;AAkBA1D,sBAAE2D,YAAF,CAAe,MAAKC,KAApB,EAA2BvD,aAA3B;;AAEA,wBAAI,MAAKuD,KAAL,CAAWtD,aAAX,CAAyBiC,MAAzB,CAAgCsB,MAAhC,IAA0C,CAA9C,EAAiD;AAC7C7D,0BAAE2D,YAAF,CAAe,MAAKC,KAAL,CAAWtD,aAAX,CAAyBiC,MAAxC,EAAgDM,cAAhD;AACH;;AAED,0BAAKiB,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKC,cAAL,CAAoBC,IAApB,OAAhC;AACA,0BAAKH,MAAL,CAAYC,EAAZ,CAAe,YAAf,EAA6B,MAAKG,WAAL,CAAiBD,IAAjB,OAA7B;AACA,0BAAKH,MAAL,CAAYC,EAAZ,CAAe,oBAAf,EAAqC,MAAKC,cAAL,CAAoBC,IAApB,OAArC;AACA,0BAAKH,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKI,cAAL,CAAoBF,IAApB,OAAjC;AACA,0BAAKH,MAAL,CAAYC,EAAZ,CAAe,mBAAf,EAAoC,MAAKK,MAAL,CAAYH,IAAZ,OAApC;;AAEA,wBAAI,MAAKL,KAAL,CAAWpB,GAAX,KAAmB,WAAnB,IAAkC,MAAKoB,KAAL,CAAWnB,QAAjD,EAA2D;AACvD,4BAAI4B,YAAJ;AACAC,mCAAW,YAAY;AACnBD,iCAAKL,cAAL,CAAoBK,KAAKT,KAAL,CAAWnB,QAA/B;AACH,yBAFD,EAEG,GAFH;AAGH,qBALD,MAKO;AACH,8BAAK8B,UAAL;AACH;AAnF0B;AAoF9B;;AAED;;;;;iDACa;AAAA;;AACT,4BAAIF,OAAO,IAAX;AAAA,4BAAiBG,gBAAjB;;AAEA,4BAAIC,OAAOC,cAAX,EAA2B;AACvBF,sCAAU,IAAIE,cAAJ,EAAV;AACH,yBAFD,MAEO;AACHF,sCAAU,IAAIG,aAAJ,CAAkB,mBAAlB,CAAV;AACH;;AAEDH,gCAAQI,kBAAR,GAA6B,YAAY;AACrC,gCAAIJ,QAAQK,UAAR,IAAsB,CAAtB,IAA2BL,QAAQM,MAAR,IAAkB,GAAjD,EAAsD;AAClDT,qCAAKU,OAAL,GAAeC,KAAKC,KAAL,CAAWT,QAAQU,YAAnB,CAAf;AACAb,qCAAKL,cAAL;AACH;AACJ,yBALD;;AAOA,4BAAIK,KAAKT,KAAL,CAAWpB,GAAX,KAAmB,KAAnB,IAA4B6B,KAAKT,KAAL,CAAWlB,GAAvC,IAA8C2B,KAAKT,KAAL,CAAWjB,OAA7D,EAAsE;AAClE6B,oCAAQW,IAAR,CAAa,MAAb,EAAqBd,KAAKT,KAAL,CAAWlB,GAAhC,EAAqC,IAArC;AACA8B,oCAAQY,IAAR,CAAaf,KAAKT,KAAL,CAAWjB,OAAxB;AACH,yBAHD,MAGO;AACH6B,sCAAU,IAAV;AACH;;AAED,6BAAKa,QAAL,CAAc,YAAM;AAAE,mCAAKd,UAAL;AAAoB,yBAA1C,EAA4CF,KAAKT,KAAL,CAAWhB,cAAvD;AACH;;;mDAEc0C,Q,EAAU;;AAErB,6BAAKA,QAAL,GAAgB,KAAK1B,KAAL,CAAWpB,GAAX,KAAmB,KAAnB,GAA2B,KAAKuC,OAAhC,GAA0CO,QAA1D;;AAEA,4BAAI,KAAK1B,KAAL,CAAWpB,GAAX,KAAmB,WAAnB,IAAkC,KAAKoB,KAAL,CAAWnB,QAAjD,EAA2D;AACvD,iCAAK6C,QAAL,GAAgBC,KAAK,KAAK3B,KAAL,CAAWnB,QAAhB,CAAhB,CADuD,CACZ;AAC9C;;AAED,6BAAKiB,IAAL,GAAY,KAAK8B,aAAL,CAAmB,KAAKF,QAAxB,CAAZ;AACAG,gCAAQC,GAAR,CAAY,KAAKhC,IAAjB;AACA,6BAAKiC,QAAL;AACH;;;+CAEU;AACP,6BAAKC,eAAL,GAAuB,IAAvB;AACA,6BAAKxB,MAAL;AACA,6BAAKwB,eAAL,GAAuB,KAAvB;AACH;;;kDAEalC,I,EAAM;AAChB,4BAAImC,UAAU,EAAd;AACA,4BAAI7F,EAAE8F,OAAF,CAAUpC,IAAV,CAAJ,EAAqB;AACjB,iCAAK,IAAIqC,IAAI,CAAb,EAAgBA,IAAIrC,KAAKG,MAAzB,EAAiCkC,GAAjC,EAAsC;AAClCF,wCAAQG,IAAR,CAAa;AACTlD,0CAAMY,KAAKqC,CAAL,EAAQjD,IADL;AAETmD,6CAASvC,KAAKqC,CAAL,EAAQE,OAFR;AAGTC,2CAAOxC,KAAKqC,CAAL,EAAQI;AAHN,iCAAb;AAKH;AACJ;AACD,+BAAON,OAAP;AACH;;;gDAEWO,G,EAAK;AACb,6BAAKhC,MAAL;AACH;;;qDAEgB;AACb,6BAAKiC,WAAL,GAAmB,CAAnB;AACA,6BAAKC,YAAL,CAAkB,MAAlB,EAA0B,mDAA1B,EAA+E,CAA/E;AACA,6BAAKA,YAAL,CAAkB,MAAlB,EAA0B,oDAA1B,EAAgF,CAAhF;AACA,6BAAKA,YAAL,CAAkB,SAAlB,EAA6B,iDAA7B,EAAgF,CAAhF;AACA,6BAAKA,YAAL,CAAkB,OAAlB,EAA2B,kDAA3B,EAA+E,CAA/E;AACH;;;+CAEU;AACP,6BAAK1C,KAAL,CAAWtD,aAAX,CAAyBE,QAAzB,CAAkCwF,IAAlC,CAAuC,wBAAvC;AACA,6BAAKL,QAAL;AACH;;;gDAEWY,U,EAAYC,K,EAAO;AAC3B,6BAAK5C,KAAL,CAAWtD,aAAX,CAAyBE,QAAzB,CAAkC+F,UAAlC,IAAgDC,KAAhD;AACA,6BAAKb,QAAL;AACH;;;gDAEW;AACR,6BAAK/B,KAAL,CAAWtD,aAAX,CAAyBiC,MAAzB,CAAgCyD,IAAhC,CAAqC;AACjClD,kCAAM,KAAKc,KAAL,CAAWtD,aAAX,CAAyBiC,MAAzB,CAAgCO,IADL;AAEjCC,kCAAM,KAF2B;AAGjCW,kCAAM;AAH2B,yBAArC;;AAMA;;AAEA,6BAAKiC,QAAL;AACH;;;2CAOMc,G,EAAKC,K,EAAO;AACfD,4BAAIE,MAAJ,CAAWD,KAAX,EAAkB,CAAlB;AACA,6BAAKf,QAAL;AACH;;;4CAEOE,O,EAAS;AACb,+BAAO7F,EAAE4G,GAAF,CAAM,KAAKlD,IAAX,EAAiB,UAAUA,IAAV,EAAgB;AACpC,mCAAOA,KAAKZ,IAAZ;AACH,yBAFM,CAAP;AAGH;;;yCAOI+D,K,EAAOC,I,EAAMC,K,EAAOC,I,EAAM;AAC3B,4BAAMC,kBAAkBH,KAAKI,IAAL,CAAU,oBAAV,EAAgC,CAAhC,CAAxB;;AAEA;AACA,4BAAIC,eAAe,SAASA,YAAT,GAAwB;AACvC,gCAAIC,OAAJ,EAAaC,MAAb;;AAEA,qCAASC,IAAT,CAAcC,QAAd,EAAwBC,QAAxB,EAAkC;AAC9B,oCAAIC,UAAU,IAAd,CAD8B,CACV;AACpB,oCAAIC,OAAOC,SAAX;;AAEA,oCAAIP,OAAJ,EAAaQ,cAAcR,OAAd;;AAEbA,0CAAUS,YAAY,YAAY;AAC9BR,6CAASE,SAASO,KAAT,CAAeL,OAAf,EAAwBC,IAAxB,CAAT;AACH,iCAFS,EAEPF,QAFO,CAAV;;AAIA,uCAAOH,MAAP;AACH;;AAED,mCAAOC,IAAP;AACH,yBAjBkB,EAAnB;;AAmBA,iCAASS,SAAT,GAAqB;AACjB,gCAAIC,SAAShB,KAAKgB,MAAL,IAAepE,MAAMoE,MAArB,IAA+BhB,KAAKiB,GAAL,CAASD,MAArD;AACA,gCAAIhI,EAAEkI,QAAF,CAAWF,MAAX,CAAJ,EAAwB;AACpBA,yCAASG,SAASH,OAAOI,OAAP,CAAe,IAAf,EAAqB,EAArB,CAAT,EAAmC,EAAnC,CAAT;AACH;AACDnB,4CAAgBoB,KAAhB,CAAsBL,MAAtB,GAA+BA,SAAS,IAAxC;AACH;;AAEDD;;AAEA,4BAAIO,UAAUrI,QAAQsI,IAAR,CAAatB,eAAb,EAA8B,MAA9B,CAAd;AACAqB,gCAAQE,MAAR;;AAEAxB,6BAAKpB,eAAL,GAAuB,IAAvB;;AAEA,iCAASxB,MAAT,GAAkB;AACd,gCAAI,CAACkE,OAAL,EAAc;;AAEdP;AACAO,oCAAQE,MAAR;;AAEA,gCAAIxB,KAAKpB,eAAT,EAA0B;AACtB0C,wCAAQG,KAAR;;AAEAH,wCAAQI,SAAR,CAAkB;AACdC,qDAAiB3B,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBC,OAD5B;AAEdiG,2CAAOQ,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBE,QAFlB;AAGdC,2CAAO;AACHmI,8CAAM5B,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBG,KAD5B;AAEHoI,iDAAS7B,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBI,QAF/B;AAGHoI,2CAAG9B,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBK,MAHzB;AAIHoI,2CAAG/B,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBM;AAJzB,qCAHO;AASdoI,6CAAS;AACLC,8CAAMjC,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBO,WAD1B;AAELqI,iDAAS;AACLC,sDAAU;AACNF,sDAAM,IADA;AAENG,0DAAU;AAFJ,6CADL;AAKLC,yDAAa;AACTJ,sDAAM;AADG;AALR;AAFJ,qCATK;AAqBdK,6CAAS;AACLC,iDAAS,MADJ;AAELC,mDAAW;AAFN,qCArBK;AAyBdC,4CAAQ;AACJR,8CAAMjC,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBQ,UAD3B;AAEJ4I,gDAAQ1C,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBS,YAF7B;AAGJ4I,6CAAK3C,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBU,SAH1B;AAIJ4I,8CAAM5C,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBW,UAJ3B;AAKJ4I,mDAAW7C,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBa,eALhC;AAMJ2I,oDAAY9C,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBY,gBANjC;AAOJwC,8CAAMqG;AAPF,qCAzBM;AAkCdC,0CAAM;AACFL,6CAAK3C,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBc,OAD5B;AAEF6I,gDAAQjD,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBe,UAF/B;AAGFuI,8CAAM5C,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBgB,QAH7B;AAIF4I,+CAAOlD,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBiB;AAJ9B,qCAlCQ;AAwCd4I,2CAAO,CAAC;AACJrH,8CAAMkE,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBmB,SAD3B;AAEJwH,8CAAMjC,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBkB,SAF3B;AAGJ4I,kDAAU;AACNnB,kDAAMjC,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBoB,aADzB;AAEN2I,uDAAW;AACP7D,uDAAOQ,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBqB;AADzB;AAFL,yCAHN;AASJ2I,kDAAU;AACNrB,kDAAMjC,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBsB,aADzB;AAEN2I,4DAAgBvD,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBuB,cAFnC;AAGNwI,uDAAW;AACP7D,uDAAOQ,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBqB;AADzB;AAHL,yCATN;AAgBJ6I,mDAAW;AACPC,uDAAW;AACPjE,uDAAOQ,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBqB;AADzB;AADJ,yCAhBP;AAqBJ+I,mDAAW;AACPzB,kDAAMjC,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBwB,cADxB;AAEPuI,uDAAW;AACP7D,uDAAOQ,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBqB;AADzB;AAFJ,yCArBP;AA2BJ+B,8CAAMiH;AA3BF,qCAAD,CAxCO;AAqEdC,2CAAO,CAAC;AACJ9H,8CAAMkE,KAAKpD,KAAL,CAAWtD,aAAX,CAAyB0B,SAD3B;AAEJiH,8CAAMjC,KAAKpD,KAAL,CAAWtD,aAAX,CAAyByB,SAF3B;AAGJqI,kDAAU;AACNnB,kDAAMjC,KAAKpD,KAAL,CAAWtD,aAAX,CAAyB2B,aADzB;AAENoI,uDAAW;AACP7D,uDAAOQ,KAAKpD,KAAL,CAAWtD,aAAX,CAAyB4B;AADzB;AAFL,yCAHN;AASJoI,kDAAU;AACNrB,kDAAMjC,KAAKpD,KAAL,CAAWtD,aAAX,CAAyB6B,aADzB;AAENoI,4DAAgBvD,KAAKpD,KAAL,CAAWtD,aAAX,CAAyB8B,cAFnC;AAGNiI,uDAAW;AACP7D,uDAAOQ,KAAKpD,KAAL,CAAWtD,aAAX,CAAyB4B;AADzB;AAHL,yCATN;AAgBJsI,mDAAW;AACPC,uDAAW;AACPjE,uDAAOQ,KAAKpD,KAAL,CAAWtD,aAAX,CAAyBqB;AADzB;AADJ,yCAhBP;AAqBJ+I,mDAAW;AACPzB,kDAAMjC,KAAKpD,KAAL,CAAWtD,aAAX,CAAyB+B,cADxB;AAEPgI,uDAAW;AACP7D,uDAAOQ,KAAKpD,KAAL,CAAWtD,aAAX,CAAyB4B;AADzB;AAFJ;AAMX;AA3BI,qCAAD,CArEO;;AAmGdK,4CAAQsI;AAnGM,iCAAlB;;AAsGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACJ;;AAED,iCAASF,OAAT,GAAmB;AACf,mCAAO3D,KAAKtD,IAAL,CAAU,CAAV,EAAauC,OAApB;AACH;;AAED,iCAAS8D,SAAT,GAAqB;AACjB,gCAAIN,SAAS,EAAb;;AAEAzC,iCAAKpD,KAAL,CAAWtD,aAAX,CAAyBiC,MAAzB,CAAgCuI,OAAhC,CAAwC,kBAAU;AAC9CrB,yCAASzJ,EAAE+K,IAAF,CAAOtB,OAAOuB,MAAP,CAAczI,OAAOO,IAArB,CAAP,CAAT;AACH,6BAFD;;AAIA,mCAAO2G,MAAP;AACH;;AAED,iCAASoB,SAAT,GAAqB;AACjB,gCAAII,YAAY,EAAhB;;AAEA,gCAAIjL,EAAE8F,OAAF,CAAUkB,KAAKtD,IAAf,CAAJ,EAA0B;AACtB;AACAsD,qCAAKpD,KAAL,CAAWtD,aAAX,CAAyBiC,MAAzB,CAAgCuI,OAAhC,CAAwC,kBAAU;AAC9C;AACA;AACA,wCAAII,gBAAgB,CAAC;AACjBpI,8CAAMP,OAAOO,IADI;AAEjBC,8CAAMR,OAAOQ,IAFI;AAGjBC,kDAAUT,OAAOS,QAHA;AAIjBC,+CAAOV,OAAOU,KAJG;AAKjBC,gDAAQX,OAAOW,MALE;AAMjBC,oDAAYZ,OAAOY,UANF;AAOjBgI,+CAAO;AACHC,oDAAQ;AACJnC,sDAAM1G,OAAOa,SADT;AAEJiI,0DAAU9I,OAAOe,aAFb;AAGJkG,2DAAWjH,OAAOgB;AAHd;AADL,yCAPU;AAcjBC,gDAAOjB,OAAOiB,MAdG;AAejBC,8CAAKlB,OAAOkB,IAfK;AAgBjB6H,mDAAW/I,OAAOc,aAhBD;AAiBjBK,8CAAM6H,qBAAqBhJ,OAAOO,IAA5B,EAAkCkE,KAAKtD,IAAvC;AAjBW,qCAAD,CAApB;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAuH,gDAAYA,UAAUD,MAAV,CAAiBE,aAAjB,CAAZ;AACH,iCAjCD;AAkCH;;AAED,mCAAOD,SAAP;AACH;;AAED;AACA,iCAASM,oBAAT,CAA8BC,UAA9B,EAA0CC,QAA1C,EAAoD;AAChD,gCAAIC,UAAU,EAAd;AACA;AACA,gCAAI1L,EAAE8F,OAAF,CAAU2F,QAAV,CAAJ,EAAyB;AACrBA,yCAASX,OAAT,CAAiB,iBAAS;AACtB;AACA,wCAAIU,cAAcG,MAAM7I,IAAxB,EAA8B;AAC1B;;AAEA4I,kDAAUE,QAAQC,IAAR,CAAaF,MAAMzF,KAAnB,CAAV;AACAT,gDAAQC,GAAR,CAAYgG,OAAZ;AACH;AACJ,iCARD;AAUH;AACD,mCAAOA,OAAP;AACH;;AAGD,6BAAK5H,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB,YAAY;AACjCK;AACA4C,iCAAK8E,kBAAL;AACH,yBAHD;AAIH;;;;cAjc4B/L,gB;;;;AAocjCG,wBAAY6L,WAAZ,GAA0B,aAA1B","file":"echarts_ctrl.js","sourcesContent":["import { MetricsPanelCtrl } from 'app/plugins/sdk';\r\nimport _ from 'lodash';\r\nimport echarts from './libs/echarts.min';\r\nimport './libs/echarts-liquidfill.min';\r\nimport './libs/dark';\r\nimport './style.css!';\r\n// import { pieA } from './PieA';\r\n// import { pieB } from './PieB';\r\n// const pieTypeArr = [\r\n//     {\r\n//         name: '并列',\r\n//         func: pieA\r\n//     }, {\r\n//         name: '环形',\r\n//         func: pieB\r\n//     }\r\n// ];\r\n\r\nexport class EchartsCtrl extends MetricsPanelCtrl {\r\n\r\n    constructor($scope, $injector) {\r\n        super($scope, $injector);\r\n\r\n        const panelDefaults = {\r\n            echartsOption: {\r\n                bgColor: '#1f1d1d',\r\n                colorArr: ['rgba(234,74,45,1)', '#FDB225', 'rgba(45,148,215,1)', '#16A59C', 'rgba(234,74,45,0.9)', '#b5c334'],\r\n                title: '主机容量',\r\n                subTitle: '',\r\n                titleX: '6%',\r\n                titleY: '2%',\r\n                toolBoxShow: true,\r\n                legendShow: true,\r\n                legendOrient: 'horizontal',\r\n                legendTop: '4%',\r\n                legendLeft: '78%',\r\n                legendItemHeight: 8,\r\n                legendItemWidth: 8,\r\n                gridTop: '20%',\r\n                gridBottom: '20%',\r\n                gridLeft: '7%',\r\n                gridRight: '7%',\r\n                xAxisShow: true,\r\n                xAxisName: '',\r\n                xAxisLineShow: true,\r\n                xAxisLineColor: 'rgba(255,255,255,0.8)',\r\n                xAxisTickShow: true,\r\n                xAxisTickAlign: true,\r\n                xSplitLineShow: false,\r\n                yAxisShow: true,\r\n                yAxisName: '',\r\n                yAxisLineShow: true,\r\n                yAxisLineColor: 'rgba(255,255,255,0.8)',\r\n                yAxisTickShow: true,\r\n                yAxisTickAlign: true,\r\n                ySplitLineShow: false,\r\n                line: [],\r\n                series: []\r\n            },\r\n            USE: 'FAKE_DATA',\r\n            fakeData: '[{\"name\":\"容量\",\"columns\":[\"time\",\"last\",\"last_1\"],\"values\":[490,1399,1657]},{\"name\":\"内存\",\"values\":[1920,199,67]}]',\r\n            url: '',\r\n            request: '',\r\n            updateInterval: 10000\r\n        };\r\n\r\n        const seriesDefaults = [\r\n            {\r\n                name: '图形1',\r\n                type: 'bar',\r\n                barWidth: '',\r\n                stack: '',\r\n                symbol: '',\r\n                symbolSize: '',\r\n                labelShow: false,\r\n                animationShow: true,\r\n                labelPosition: 'inside',\r\n                labelFormatter: '{c}',\r\n                smooth:'',\r\n                step:'',\r\n                data: []\r\n            }\r\n        ];\r\n\r\n        _.defaultsDeep(this.panel, panelDefaults);\r\n\r\n        if (this.panel.echartsOption.series.length == 0) {\r\n            _.defaultsDeep(this.panel.echartsOption.series, seriesDefaults);\r\n        }\r\n\r\n        this.events.on('data-received', this.onDataReceived.bind(this));\r\n        this.events.on('data-error', this.onDataError.bind(this));\r\n        this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\r\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n        this.events.on('panel-initialized', this.render.bind(this));\r\n\r\n        if (this.panel.USE === 'FAKE_DATA' && this.panel.fakeData) {\r\n            let that = this;\r\n            setTimeout(function () {\r\n                that.onDataReceived(that.panel.fakeData);\r\n            }, 500);\r\n        } else {\r\n            this.updateData();\r\n        }\r\n    }\r\n\r\n    //post请求\r\n    updateData() {\r\n        let that = this, xmlhttp;\r\n\r\n        if (window.XMLHttpRequest) {\r\n            xmlhttp = new XMLHttpRequest();\r\n        } else {\r\n            xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n        }\r\n\r\n        xmlhttp.onreadystatechange = function () {\r\n            if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\r\n                that.UrlData = JSON.parse(xmlhttp.responseText);\r\n                that.onDataReceived();\r\n            }\r\n        };\r\n\r\n        if (that.panel.USE === 'URL' && that.panel.url && that.panel.request) {\r\n            xmlhttp.open(\"POST\", that.panel.url, true);\r\n            xmlhttp.send(that.panel.request);\r\n        } else {\r\n            xmlhttp = null;\r\n        }\r\n\r\n        this.$timeout(() => { this.updateData(); }, that.panel.updateInterval);\r\n    }\r\n\r\n    onDataReceived(dataList) {\r\n\r\n        this.dataList = this.panel.USE === 'URL' ? this.UrlData : dataList;\r\n\r\n        if (this.panel.USE === 'FAKE_DATA' && this.panel.fakeData) {\r\n            this.dataList = eval(this.panel.fakeData); // jshint ignore:line\r\n        }\r\n\r\n        this.data = this.translateData(this.dataList);\r\n        console.log(this.data);\r\n        this.onRender();\r\n    }\r\n\r\n    onRender() {\r\n        this.IS_DATA_CHANGED = true;\r\n        this.render();\r\n        this.IS_DATA_CHANGED = false;\r\n    }\r\n\r\n    translateData(data) {\r\n        let dataArr = [];\r\n        if (_.isArray(data)) {\r\n            for (let i = 0; i < data.length; i++) {\r\n                dataArr.push({\r\n                    name: data[i].name,\r\n                    columns: data[i].columns,\r\n                    value: data[i].values\r\n                });\r\n            }\r\n        }\r\n        return dataArr;\r\n    }\r\n\r\n    onDataError(err) {\r\n        this.render();\r\n    }\r\n\r\n    onInitEditMode() {\r\n        this.subTabIndex = 0;\r\n        this.addEditorTab('数据配置', 'public/plugins/dxc-graph-panel/editer-metric.html', 2);\r\n        this.addEditorTab('常规配置', 'public/plugins/dxc-graph-panel/editor-echarts.html', 3);\r\n        this.addEditorTab('直角坐标系配置', 'public/plugins/dxc-graph-panel/editor-grid.html', 4);\r\n        this.addEditorTab('柱形图配置', 'public/plugins/dxc-graph-panel/editor-graph.html', 5);\r\n    }\r\n\r\n    addColor() {\r\n        this.panel.echartsOption.colorArr.push('rgba(255, 255, 255, 1)');\r\n        this.onRender();\r\n    }\r\n\r\n    changeColor(colorIndex, color) {\r\n        this.panel.echartsOption.colorArr[colorIndex] = color;\r\n        this.onRender();\r\n    }\r\n\r\n    addSeries() {\r\n        this.panel.echartsOption.series.push({\r\n            name: this.panel.echartsOption.series.name,\r\n            type: 'bar',\r\n            data: []\r\n        });\r\n\r\n        // this.subTabIndex = this.panel.echartsOption.series.length - 1;\r\n\r\n        this.onRender();\r\n    }\r\n\r\n    // addData(dataArr) {\r\n    //     dataArr.push(this.data[0].name);\r\n    //     this.onRender();\r\n    // }\r\n\r\n    remove(obj, index) {\r\n        obj.splice(index, 1);\r\n        this.onRender();\r\n    }\r\n\r\n    getData(dataArr) {\r\n        return _.map(this.data, function (data) {\r\n            return data.name;\r\n        });\r\n    }\r\n\r\n    // invertColor() {\r\n    //     this.panel.echartsOption.colorArr.reverse();\r\n    //     this.onRender();\r\n    // }\r\n\r\n    link(scope, elem, attrs, ctrl) {\r\n        const $panelContainer = elem.find('.echarts_container')[0];\r\n\r\n        // 防止重复触发事件\r\n        var callInterval = function callInterval() {\r\n            var timeout, result;\r\n\r\n            function func(callBack, interval) {\r\n                var context = this; // jshint ignore:line\r\n                var args = arguments;\r\n\r\n                if (timeout) clearInterval(timeout);\r\n\r\n                timeout = setInterval(function () {\r\n                    result = callBack.apply(context, args);\r\n                }, interval);\r\n\r\n                return result;\r\n            }\r\n\r\n            return func;\r\n        }();\r\n\r\n        function setHeight() {\r\n            let height = ctrl.height || panel.height || ctrl.row.height;\r\n            if (_.isString(height)) {\r\n                height = parseInt(height.replace('px', ''), 10);\r\n            }\r\n            $panelContainer.style.height = height + 'px';\r\n        }\r\n\r\n        setHeight();\r\n\r\n        let myChart = echarts.init($panelContainer, 'dark');\r\n        myChart.resize();\r\n\r\n        ctrl.IS_DATA_CHANGED = true;\r\n\r\n        function render() {\r\n            if (!myChart) return;\r\n\r\n            setHeight();\r\n            myChart.resize();\r\n\r\n            if (ctrl.IS_DATA_CHANGED) {\r\n                myChart.clear();\r\n\r\n                myChart.setOption({\r\n                    backgroundColor: ctrl.panel.echartsOption.bgColor,\r\n                    color: ctrl.panel.echartsOption.colorArr,\r\n                    title: {\r\n                        text: ctrl.panel.echartsOption.title,\r\n                        subtext: ctrl.panel.echartsOption.subTitle,\r\n                        x: ctrl.panel.echartsOption.titleX,\r\n                        y: ctrl.panel.echartsOption.titleY\r\n                    },\r\n                    toolbox: {\r\n                        show: ctrl.panel.echartsOption.toolBoxShow,\r\n                        feature: {\r\n                            dataView: {\r\n                                show: true,\r\n                                readOnly: false\r\n                            },\r\n                            saveAsImage: {\r\n                                show: true\r\n                            }\r\n                        }\r\n                    },\r\n                    tooltip: {\r\n                        trigger: 'item',\r\n                        formatter: \"{a} : {c} \"\r\n                    },\r\n                    legend: {\r\n                        show: ctrl.panel.echartsOption.legendShow,\r\n                        orient: ctrl.panel.echartsOption.legendOrient,\r\n                        top: ctrl.panel.echartsOption.legendTop,\r\n                        left: ctrl.panel.echartsOption.legendLeft,\r\n                        itemWidth: ctrl.panel.echartsOption.legendItemWidth,\r\n                        itemHeight: ctrl.panel.echartsOption.legendItemHeight,\r\n                        data: getLegend()\r\n                    },\r\n                    grid: {\r\n                        top: ctrl.panel.echartsOption.gridTop,\r\n                        bottom: ctrl.panel.echartsOption.gridBottom,\r\n                        left: ctrl.panel.echartsOption.gridLeft,\r\n                        right: ctrl.panel.echartsOption.gridRight,\r\n                    },\r\n                    xAxis: [{\r\n                        name: ctrl.panel.echartsOption.xAxisName,\r\n                        show: ctrl.panel.echartsOption.xAxisShow,\r\n                        axisLine: {\r\n                            show: ctrl.panel.echartsOption.xAxisLineShow,\r\n                            lineStyle: {\r\n                                color: ctrl.panel.echartsOption.xAxisLineColor,\r\n                            },\r\n                        },\r\n                        axisTick: {\r\n                            show: ctrl.panel.echartsOption.xAxisTickShow,\r\n                            alignWithLabel: ctrl.panel.echartsOption.xAxisTickAlign,\r\n                            lineStyle: {\r\n                                color: ctrl.panel.echartsOption.xAxisLineColor,\r\n                            },\r\n                        },\r\n                        axisLabel: {\r\n                            textStyle: {\r\n                                color: ctrl.panel.echartsOption.xAxisLineColor,\r\n                            }\r\n                        },\r\n                        splitLine: {\r\n                            show: ctrl.panel.echartsOption.xSplitLineShow,\r\n                            lineStyle: {\r\n                                color: ctrl.panel.echartsOption.xAxisLineColor,\r\n                            }\r\n                        },\r\n                        data: getLine()\r\n                    }],\r\n                    yAxis: [{\r\n                        name: ctrl.panel.echartsOption.yAxisName,\r\n                        show: ctrl.panel.echartsOption.yAxisShow,\r\n                        axisLine: {\r\n                            show: ctrl.panel.echartsOption.yAxisLineShow,\r\n                            lineStyle: {\r\n                                color: ctrl.panel.echartsOption.yAxisLineColor,\r\n                            }\r\n                        },\r\n                        axisTick: {\r\n                            show: ctrl.panel.echartsOption.yAxisTickShow,\r\n                            alignWithLabel: ctrl.panel.echartsOption.yAxisTickAlign,\r\n                            lineStyle: {\r\n                                color: ctrl.panel.echartsOption.yAxisLineColor,\r\n                            },\r\n                        },\r\n                        axisLabel: {\r\n                            textStyle: {\r\n                                color: ctrl.panel.echartsOption.xAxisLineColor,\r\n                            }\r\n                        },\r\n                        splitLine: {\r\n                            show: ctrl.panel.echartsOption.ySplitLineShow,\r\n                            lineStyle: {\r\n                                color: ctrl.panel.echartsOption.yAxisLineColor,\r\n                            }\r\n                        },\r\n                        // data: getLine()\r\n                    }],\r\n\r\n                    series: getSeries()\r\n                });\r\n\r\n                // let count = 0;\r\n                // callInterval(function () {\r\n                //     myChart.dispatchAction({\r\n                //         type: 'downplay',\r\n                //         seriesIndex: 0\r\n                //     });\r\n                //     myChart.dispatchAction({\r\n                //         type: 'highlight',\r\n                //         seriesIndex: 0,\r\n                //         dataIndex: (count++) % getSeries()[0].data.length\r\n                //     });\r\n                // }, 2000);\r\n            }\r\n        }\r\n\r\n        function getLine() {\r\n            return ctrl.data[0].columns;\r\n        }\r\n\r\n        function getLegend() {\r\n            let legend = [];\r\n\r\n            ctrl.panel.echartsOption.series.forEach(series => {\r\n                legend = _.uniq(legend.concat(series.name));\r\n            });\r\n\r\n            return legend;\r\n        }\r\n\r\n        function getSeries() {\r\n            let seriesArr = [];\r\n\r\n            if (_.isArray(ctrl.data)) {\r\n                // 遍历保存的series\r\n                ctrl.panel.echartsOption.series.forEach(series => {\r\n                    // 默认类型series\r\n                    // let newSeries = [];\r\n                    let defaultSeries = [{\r\n                        name: series.name,\r\n                        type: series.type,\r\n                        barWidth: series.barWidth,\r\n                        stack: series.stack,\r\n                        symbol: series.symbol,\r\n                        symbolSize: series.symbolSize,\r\n                        label: {\r\n                            normal: {\r\n                                show: series.labelShow,\r\n                                position: series.labelPosition,\r\n                                formatter: series.labelFormatter\r\n                            }\r\n                        },\r\n                        smooth:series.smooth,\r\n                        step:series.step,\r\n                        animation: series.animationShow,\r\n                        data: getDefaultSeriesData(series.name, ctrl.data)\r\n                    }];\r\n                    // // 匹配声明的饼图类型\r\n                    // pieTypeArr.forEach((type, tIndex) => {\r\n                    //     // 如果匹配到了\r\n                    //     if (series.pieType == type.name) {\r\n                    //         // 赋值给newSeries\r\n                    //         newSeries = pieTypeArr[tIndex].func(series, ctrl.data);\r\n                    //     }\r\n                    // });\r\n                    // 加入新series\r\n                    // seriesArr = seriesArr.concat(newSeries.length != 0 ? newSeries : defaultSeries);\r\n                    seriesArr = seriesArr.concat(defaultSeries);\r\n                });\r\n            }\r\n\r\n            return seriesArr;\r\n        }\r\n\r\n        //默认样式获取数据\r\n        function getDefaultSeriesData(seriesName, ctrlData) {\r\n            let newData = [];\r\n            // 匹配所有数据\r\n            if (_.isArray(ctrlData)) {\r\n                ctrlData.forEach(cData => {\r\n                    // 如果相等\r\n                    if (seriesName == cData.name) {\r\n                        // 复制到newData，遍历结束后newData便包含当前series的所有数据\r\n\r\n                        newData = angular.copy(cData.value);\r\n                        console.log(newData);\r\n                    }\r\n                });\r\n\r\n            }\r\n            return newData;\r\n        }\r\n\r\n\r\n        this.events.on('render', function () {\r\n            render();\r\n            ctrl.renderingCompleted();\r\n        });\r\n    }\r\n}\r\n\r\nEchartsCtrl.templateUrl = 'module.html';\r\n"]}